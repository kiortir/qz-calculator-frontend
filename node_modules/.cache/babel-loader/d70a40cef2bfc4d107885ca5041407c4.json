{"remainingRequest":"C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\src\\components\\Result.vue?vue&type=template&id=a6296ab6","dependencies":[{"path":"C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\src\\components\\Result.vue","mtime":1638802636620},{"path":"C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\babel.config.js","mtime":1637823043801},{"path":"C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635145909564},{"path":"C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1635145909575},{"path":"C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1635145909574},{"path":"C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1636448782177},{"path":"C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1635145909564},{"path":"C:\\Users\\Asus\\Documents\\calculator\\calculator\\main\\frontend\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1636448782177}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}